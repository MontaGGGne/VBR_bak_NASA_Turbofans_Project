version: "3"

services:

  rabbitmqServer:
    container_name: rabbitmqServer
    image: rabbitmq:3.10.7-management
    hostname: "rabbitmqhost"
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
      - ./rabbitmq/log/:/var/log/rabbitmq/
    ports:
      - 5672:5672    #amqp
      - 15672:15672  #http
      - 15692:15692  #prometheus
    healthcheck:
      test: rabbitmq-diagnostics -q status && rabbitmq-diagnostics -q check_local_alarms
      interval: 30s
      timeout: 3s
      retries: 3

  rmq_consumer_1:
    tty: true
    container_name: rmq_consumer_1
    build:
        context: .
        dockerfile: ./rabbit_consumer/Dockerfile
    restart: always
    depends_on:
      rabbitmqServer:
        condition: service_healthy
    environment:
      - PROD_NUM=1
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_WRITE_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_WRITE_KEY}
      - BUCKET_ID=${BUCKET_ID}
      - HOST=${HOST}
      - PORT=${PORT}
      - USER=${USER}
      - PASSWORD=${PASSWORD}
      - EXCHANGE=${EXCHANGE}
      - EXCHANGE_TYPE=${EXCHANGE_TYPE}
      - QUEUE_REQUEST=${QUEUE_REQUEST}
      - QUEUE_RESPONSE=${QUEUE_RESPONSE}
      - ROUTING_KEY_REQUEST=${ROUTING_KEY_REQUEST_CONSUMER}
      - ROUTING_KEY_RESPONSE=${ROUTING_KEY_RESPONSE_CONSUMER}
    volumes:
      - ./rabbit_consumer/:/workspace/rabbit_consumer/
    command: python3 /workspace/rabbit_consumer/rpc_consumer.py